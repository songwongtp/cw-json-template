{
  "contract_name": "json-template",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "properties": {
      "opt_uint128": {
        "description": "opt_uint128 - Option<Uint128>",
        "anyOf": [
          {
            "$ref": "#/definitions/Uint128"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Set new Option<Addr>.",
        "type": "object",
        "required": [
          "set_opt_addr"
        ],
        "properties": {
          "set_opt_addr": {
            "type": "object",
            "properties": {
              "new_opt_addr": {
                "description": "new_opt_addr - Option<String>",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Set new Option<Uint128>.",
        "type": "object",
        "required": [
          "set_opt_uint128"
        ],
        "properties": {
          "set_opt_uint128": {
            "type": "object",
            "properties": {
              "new_opt_uint128": {
                "description": "new_opt_uint128 - Option<Uint128>",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Set new Option<Vec<i32>>.",
        "type": "object",
        "required": [
          "set_opt_vec_numbers"
        ],
        "properties": {
          "set_opt_vec_numbers": {
            "type": "object",
            "properties": {
              "new_opt_vec_numbers": {
                "description": "new_opt_vec_numbers - Option<Vec<i32>>",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Set new Vec<Option<String>>.",
        "type": "object",
        "required": [
          "set_vec_opt_strings"
        ],
        "properties": {
          "set_vec_opt_strings": {
            "type": "object",
            "required": [
              "new_vec_opt_strings"
            ],
            "properties": {
              "new_vec_opt_strings": {
                "description": "new_vec_opt_strings - Vec<Option<String>>",
                "type": "array",
                "items": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Set new Vec<DenomUnit>>.",
        "type": "object",
        "required": [
          "set_vec_denom_units"
        ],
        "properties": {
          "set_vec_denom_units": {
            "type": "object",
            "required": [
              "new_vec_denom_units"
            ],
            "properties": {
              "new_vec_denom_units": {
                "description": "new_vec_denom_units - Vec<DenomUnit> struct DenomUnit { denom: String, exponent: u32, aliases: Vec<String>, }",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DenomUnit"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Fixed string",
        "type": "string",
        "enum": [
          "execute_message"
        ]
      },
      {
        "description": "Empty message do nothing",
        "type": "object",
        "required": [
          "empty"
        ],
        "properties": {
          "empty": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "String message do nothing",
        "type": "object",
        "required": [
          "string"
        ],
        "properties": {
          "string": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update OWNER item.",
        "type": "object",
        "required": [
          "update_owner"
        ],
        "properties": {
          "update_owner": {
            "$ref": "#/definitions/OwnerUpdate"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "DenomUnit": {
        "description": "Replicates the cosmos-sdk bank module DenomUnit type",
        "type": "object",
        "required": [
          "aliases",
          "denom",
          "exponent"
        ],
        "properties": {
          "aliases": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "denom": {
            "type": "string"
          },
          "exponent": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        }
      },
      "OwnerUpdate": {
        "oneOf": [
          {
            "description": "Proposes a new owner to take role. Only current owner can execute.",
            "type": "object",
            "required": [
              "update_owner"
            ],
            "properties": {
              "update_owner": {
                "type": "object",
                "required": [
                  "new_owner"
                ],
                "properties": {
                  "new_owner": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Change owner status.",
            "type": "object",
            "required": [
              "update_status"
            ],
            "properties": {
              "update_status": {
                "type": "object",
                "required": [
                  "new_status"
                ],
                "properties": {
                  "new_status": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Clear owner status.",
            "type": "string",
            "enum": [
              "clear_status"
            ]
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "GetOwner returns the current OWNER state saved in the contract.",
        "type": "object",
        "required": [
          "get_owner"
        ],
        "properties": {
          "get_owner": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "GetState returns the current state saved in the contract.",
        "type": "object",
        "required": [
          "get_state"
        ],
        "properties": {
          "get_state": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "GetObject returns the input directly",
        "type": "object",
        "required": [
          "get_object"
        ],
        "properties": {
          "get_object": {
            "type": "object",
            "required": [
              "object"
            ],
            "properties": {
              "object": {
                "$ref": "#/definitions/Object"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "GetDenomUnit message",
        "type": "object",
        "required": [
          "get_denom_unit"
        ],
        "properties": {
          "get_denom_unit": {
            "$ref": "#/definitions/DenomUnit"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "String message",
        "type": "object",
        "required": [
          "get_string"
        ],
        "properties": {
          "get_string": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Number message",
        "type": "object",
        "required": [
          "get_number"
        ],
        "properties": {
          "get_number": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Bool message",
        "type": "object",
        "required": [
          "get_bool"
        ],
        "properties": {
          "get_bool": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Fix String Option 1",
        "type": "string",
        "enum": [
          "query_message1"
        ]
      },
      {
        "description": "Fix String Option 2",
        "type": "string",
        "enum": [
          "query_message2"
        ]
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "DenomUnit": {
        "description": "Replicates the cosmos-sdk bank module DenomUnit type",
        "type": "object",
        "required": [
          "aliases",
          "denom",
          "exponent"
        ],
        "properties": {
          "aliases": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "denom": {
            "type": "string"
          },
          "exponent": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        }
      },
      "Object": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "enum_option1",
              "enum_option2"
            ]
          },
          {
            "type": "object",
            "required": [
              "number"
            ],
            "properties": {
              "number": {
                "type": "object",
                "required": [
                  "value"
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "opt_number"
            ],
            "properties": {
              "opt_number": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "int32"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "string"
            ],
            "properties": {
              "string": {
                "type": "object",
                "required": [
                  "value"
                ],
                "properties": {
                  "value": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "opt_string"
            ],
            "properties": {
              "opt_string": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "denom_unit"
            ],
            "properties": {
              "denom_unit": {
                "type": "object",
                "required": [
                  "value"
                ],
                "properties": {
                  "value": {
                    "$ref": "#/definitions/DenomUnit"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "opt_vec_denom_unit"
            ],
            "properties": {
              "opt_vec_denom_unit": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "$ref": "#/definitions/DenomUnit"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "vec_u8"
            ],
            "properties": {
              "vec_u8": {
                "type": "object",
                "required": [
                  "value"
                ],
                "properties": {
                  "value": {
                    "$ref": "#/definitions/Binary"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "opt_bool"
            ],
            "properties": {
              "opt_bool": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": [
                      "boolean",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "empty"
            ],
            "properties": {
              "empty": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "object",
    "required": [
      "object"
    ],
    "properties": {
      "object": {
        "description": "object (for testing, not used)",
        "allOf": [
          {
            "$ref": "#/definitions/Object"
          }
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "DenomUnit": {
        "description": "Replicates the cosmos-sdk bank module DenomUnit type",
        "type": "object",
        "required": [
          "aliases",
          "denom",
          "exponent"
        ],
        "properties": {
          "aliases": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "denom": {
            "type": "string"
          },
          "exponent": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        }
      },
      "Object": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "enum_option1",
              "enum_option2"
            ]
          },
          {
            "type": "object",
            "required": [
              "number"
            ],
            "properties": {
              "number": {
                "type": "object",
                "required": [
                  "value"
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "opt_number"
            ],
            "properties": {
              "opt_number": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "int32"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "string"
            ],
            "properties": {
              "string": {
                "type": "object",
                "required": [
                  "value"
                ],
                "properties": {
                  "value": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "opt_string"
            ],
            "properties": {
              "opt_string": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "denom_unit"
            ],
            "properties": {
              "denom_unit": {
                "type": "object",
                "required": [
                  "value"
                ],
                "properties": {
                  "value": {
                    "$ref": "#/definitions/DenomUnit"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "opt_vec_denom_unit"
            ],
            "properties": {
              "opt_vec_denom_unit": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "$ref": "#/definitions/DenomUnit"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "vec_u8"
            ],
            "properties": {
              "vec_u8": {
                "type": "object",
                "required": [
                  "value"
                ],
                "properties": {
                  "value": {
                    "$ref": "#/definitions/Binary"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "opt_bool"
            ],
            "properties": {
              "opt_bool": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": [
                      "boolean",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "empty"
            ],
            "properties": {
              "empty": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "sudo": null,
  "responses": {
    "get_bool": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetBoolResponse",
      "description": "Response from get_bool.",
      "type": "boolean"
    },
    "get_denom_unit": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetDenomUnitResponse",
      "description": "Response from get_denom_unit.",
      "allOf": [
        {
          "$ref": "#/definitions/DenomUnit"
        }
      ],
      "definitions": {
        "DenomUnit": {
          "description": "Replicates the cosmos-sdk bank module DenomUnit type",
          "type": "object",
          "required": [
            "aliases",
            "denom",
            "exponent"
          ],
          "properties": {
            "aliases": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "denom": {
              "type": "string"
            },
            "exponent": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        }
      }
    },
    "get_number": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetNumberResponse",
      "description": "Response from get_number.",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "get_object": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetObjectResponse",
      "description": "Response from get_object.",
      "type": "object",
      "required": [
        "object"
      ],
      "properties": {
        "object": {
          "description": "object result",
          "allOf": [
            {
              "$ref": "#/definitions/Object"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "DenomUnit": {
          "description": "Replicates the cosmos-sdk bank module DenomUnit type",
          "type": "object",
          "required": [
            "aliases",
            "denom",
            "exponent"
          ],
          "properties": {
            "aliases": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "denom": {
              "type": "string"
            },
            "exponent": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        },
        "Object": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "enum_option1",
                "enum_option2"
              ]
            },
            {
              "type": "object",
              "required": [
                "number"
              ],
              "properties": {
                "number": {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "opt_number"
              ],
              "properties": {
                "opt_number": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": [
                        "integer",
                        "null"
                      ],
                      "format": "int32"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "string"
              ],
              "properties": {
                "string": {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "opt_string"
              ],
              "properties": {
                "opt_string": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "denom_unit"
              ],
              "properties": {
                "denom_unit": {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "$ref": "#/definitions/DenomUnit"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "opt_vec_denom_unit"
              ],
              "properties": {
                "opt_vec_denom_unit": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "$ref": "#/definitions/DenomUnit"
                      }
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "vec_u8"
              ],
              "properties": {
                "vec_u8": {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "$ref": "#/definitions/Binary"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "opt_bool"
              ],
              "properties": {
                "opt_bool": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": [
                        "boolean",
                        "null"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "empty"
              ],
              "properties": {
                "empty": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "get_owner": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetOwnerResponse",
      "description": "Response from get_owner",
      "type": "object",
      "required": [
        "owner_response"
      ],
      "properties": {
        "owner_response": {
          "description": "current OWNER state",
          "allOf": [
            {
              "$ref": "#/definitions/OwnerResponse"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "OwnerResponse": {
          "description": "Returned from Owner.query()",
          "type": "object",
          "required": [
            "owner"
          ],
          "properties": {
            "owner": {
              "type": "string"
            },
            "status": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_state": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetStateResponse",
      "description": "Response from get_state",
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "state": {
          "description": "current contract state",
          "allOf": [
            {
              "$ref": "#/definitions/State"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "DenomUnit": {
          "description": "Replicates the cosmos-sdk bank module DenomUnit type",
          "type": "object",
          "required": [
            "aliases",
            "denom",
            "exponent"
          ],
          "properties": {
            "aliases": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "denom": {
              "type": "string"
            },
            "exponent": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        },
        "State": {
          "type": "object",
          "required": [
            "vec_denom_units",
            "vec_opt_strings"
          ],
          "properties": {
            "opt_addr": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "opt_uint128": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "opt_vec_numbers": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "vec_denom_units": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DenomUnit"
              }
            },
            "vec_opt_strings": {
              "type": "array",
              "items": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_string": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetStringResponse",
      "description": "Response from get_string.",
      "type": "string"
    },
    "query_message1": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QueryMessage1Response",
      "description": "Response from query_message_1.",
      "type": "null"
    },
    "query_message2": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QueryMessage2Response",
      "description": "Response from query_message_2",
      "type": "object",
      "additionalProperties": false
    }
  }
}
