{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Set new Option<Addr>.",
      "type": "object",
      "required": [
        "set_opt_addr"
      ],
      "properties": {
        "set_opt_addr": {
          "type": "object",
          "properties": {
            "new_opt_addr": {
              "description": "new_opt_addr - Option<String>",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Set new Option<Uint128>.",
      "type": "object",
      "required": [
        "set_opt_uint128"
      ],
      "properties": {
        "set_opt_uint128": {
          "type": "object",
          "properties": {
            "new_opt_uint128": {
              "description": "new_opt_uint128 - Option<Uint128>",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Set new Option<Vec<i32>>.",
      "type": "object",
      "required": [
        "set_opt_vec_numbers"
      ],
      "properties": {
        "set_opt_vec_numbers": {
          "type": "object",
          "properties": {
            "new_opt_vec_numbers": {
              "description": "new_opt_vec_numbers - Option<Vec<i32>>",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Set new Vec<Option<String>>.",
      "type": "object",
      "required": [
        "set_vec_opt_strings"
      ],
      "properties": {
        "set_vec_opt_strings": {
          "type": "object",
          "required": [
            "new_vec_opt_strings"
          ],
          "properties": {
            "new_vec_opt_strings": {
              "description": "new_vec_opt_strings - Vec<Option<String>>",
              "type": "array",
              "items": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Set new Vec<DenomUnit>>.",
      "type": "object",
      "required": [
        "set_vec_denom_units"
      ],
      "properties": {
        "set_vec_denom_units": {
          "type": "object",
          "required": [
            "new_vec_denom_units"
          ],
          "properties": {
            "new_vec_denom_units": {
              "description": "new_vec_denom_units - Vec<DenomUnit> struct DenomUnit { denom: String, exponent: u32, aliases: Vec<String>, }",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DenomUnit"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update OWNER item.",
      "type": "object",
      "required": [
        "update_owner"
      ],
      "properties": {
        "update_owner": {
          "$ref": "#/definitions/OwnerUpdate"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "DenomUnit": {
      "description": "Replicates the cosmos-sdk bank module DenomUnit type",
      "type": "object",
      "required": [
        "aliases",
        "denom",
        "exponent"
      ],
      "properties": {
        "aliases": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "denom": {
          "type": "string"
        },
        "exponent": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "OwnerUpdate": {
      "oneOf": [
        {
          "description": "Proposes a new owner to take role. Only current owner can execute.",
          "type": "object",
          "required": [
            "update_owner"
          ],
          "properties": {
            "update_owner": {
              "type": "object",
              "required": [
                "new_owner"
              ],
              "properties": {
                "new_owner": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Change owner status.",
          "type": "object",
          "required": [
            "update_status"
          ],
          "properties": {
            "update_status": {
              "type": "object",
              "required": [
                "new_status"
              ],
              "properties": {
                "new_status": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Clear owner status.",
          "type": "string",
          "enum": [
            "clear_status"
          ]
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
